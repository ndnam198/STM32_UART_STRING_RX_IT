
User Input Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da0  08002da0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002da0  08002da0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002da0  08002da0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000070  08002e18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08002e18  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079d9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171e  00000000  00000000  00027a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00029190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00029840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013cf0  00000000  00000000  00029e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a47  00000000  00000000  0003db18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ae3b  00000000  00000000  0004555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b039a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c8c  00000000  00000000  000b0418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b94 	.word	0x08002b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002b94 	.word	0x08002b94

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b08f      	sub	sp, #60	; 0x3c
 8000160:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc77 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8f3 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f98b 	bl	8000484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016e:	f000 f935 	bl	80003dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000172:	f000 f95d 	bl	8000430 <MX_USART3_UART_Init>

  offAllLed;
 8000176:	2201      	movs	r2, #1
 8000178:	2120      	movs	r1, #32
 800017a:	4863      	ldr	r0, [pc, #396]	; (8000308 <main+0x1ac>)
 800017c:	f000 ffcc 	bl	8001118 <HAL_GPIO_WritePin>
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000186:	4861      	ldr	r0, [pc, #388]	; (800030c <main+0x1b0>)
 8000188:	f000 ffc6 	bl	8001118 <HAL_GPIO_WritePin>
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	485e      	ldr	r0, [pc, #376]	; (800030c <main+0x1b0>)
 8000194:	f000 ffc0 	bl	8001118 <HAL_GPIO_WritePin>
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019e:	485a      	ldr	r0, [pc, #360]	; (8000308 <main+0x1ac>)
 80001a0:	f000 ffba 	bl	8001118 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)ucRxData, 2);
 80001a4:	2202      	movs	r2, #2
 80001a6:	495a      	ldr	r1, [pc, #360]	; (8000310 <main+0x1b4>)
 80001a8:	485a      	ldr	r0, [pc, #360]	; (8000314 <main+0x1b8>)
 80001aa:	f001 fd09 	bl	8001bc0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)ucRxData, 2);
 80001ae:	2202      	movs	r2, #2
 80001b0:	4957      	ldr	r1, [pc, #348]	; (8000310 <main+0x1b4>)
 80001b2:	4859      	ldr	r0, [pc, #356]	; (8000318 <main+0x1bc>)
 80001b4:	f001 fd04 	bl	8001bc0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PRINTF("Project name: UART_INPUT_RECEIVE_IT\r\n");
 80001b8:	4e56      	ldr	r6, [pc, #344]	; (8000314 <main+0x1b8>)
 80001ba:	4b58      	ldr	r3, [pc, #352]	; (800031c <main+0x1c0>)
 80001bc:	930c      	str	r3, [sp, #48]	; 0x30
 80001be:	466d      	mov	r5, sp
 80001c0:	f106 0410 	add.w	r4, r6, #16
 80001c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80001d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80001d8:	f000 fa72 	bl	80006c0 <vUARTSend>
  PRINTF("**********************************SHORT DESCRIPTION******************************\r\n");
 80001dc:	4e4d      	ldr	r6, [pc, #308]	; (8000314 <main+0x1b8>)
 80001de:	4b50      	ldr	r3, [pc, #320]	; (8000320 <main+0x1c4>)
 80001e0:	930c      	str	r3, [sp, #48]	; 0x30
 80001e2:	466d      	mov	r5, sp
 80001e4:	f106 0410 	add.w	r4, r6, #16
 80001e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80001f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80001fc:	f000 fa60 	bl	80006c0 <vUARTSend>
  PRINTF("This project will read user input from USART2 and USART3 interface and re-print it to terminal for debugging\r\n");
 8000200:	4e44      	ldr	r6, [pc, #272]	; (8000314 <main+0x1b8>)
 8000202:	4b48      	ldr	r3, [pc, #288]	; (8000324 <main+0x1c8>)
 8000204:	930c      	str	r3, [sp, #48]	; 0x30
 8000206:	466d      	mov	r5, sp
 8000208:	f106 0410 	add.w	r4, r6, #16
 800020c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000214:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000218:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800021c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000220:	f000 fa4e 	bl	80006c0 <vUARTSend>
  PRINTF("*********************************************************************************\r\n");
 8000224:	4e3b      	ldr	r6, [pc, #236]	; (8000314 <main+0x1b8>)
 8000226:	4b40      	ldr	r3, [pc, #256]	; (8000328 <main+0x1cc>)
 8000228:	930c      	str	r3, [sp, #48]	; 0x30
 800022a:	466d      	mov	r5, sp
 800022c:	f106 0410 	add.w	r4, r6, #16
 8000230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000238:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800023c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000240:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000244:	f000 fa3c 	bl	80006c0 <vUARTSend>
  PRINTF("Run Application\r\n");
 8000248:	4e32      	ldr	r6, [pc, #200]	; (8000314 <main+0x1b8>)
 800024a:	4b38      	ldr	r3, [pc, #224]	; (800032c <main+0x1d0>)
 800024c:	930c      	str	r3, [sp, #48]	; 0x30
 800024e:	466d      	mov	r5, sp
 8000250:	f106 0410 	add.w	r4, r6, #16
 8000254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800025a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000260:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000264:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000268:	f000 fa2a 	bl	80006c0 <vUARTSend>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    toggleLed4; /* Check chip's halt */
 800026c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000270:	4825      	ldr	r0, [pc, #148]	; (8000308 <main+0x1ac>)
 8000272:	f000 ff69 	bl	8001148 <HAL_GPIO_TogglePin>
    /* Check if receiving a string from USART2 completed */
    if (ucTransmitCpltFlag)
 8000276:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <main+0x1d4>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d01d      	beq.n	80002ba <main+0x15e>
    {
      sprintf(ucGeneralString, "\r\nUART2 Received String: \"%s\"", ucRxBuffer);
 800027e:	4a2d      	ldr	r2, [pc, #180]	; (8000334 <main+0x1d8>)
 8000280:	492d      	ldr	r1, [pc, #180]	; (8000338 <main+0x1dc>)
 8000282:	482e      	ldr	r0, [pc, #184]	; (800033c <main+0x1e0>)
 8000284:	f002 f874 	bl	8002370 <siprintf>
      PRINTF(ucGeneralString);
 8000288:	4e22      	ldr	r6, [pc, #136]	; (8000314 <main+0x1b8>)
 800028a:	4b2c      	ldr	r3, [pc, #176]	; (800033c <main+0x1e0>)
 800028c:	930c      	str	r3, [sp, #48]	; 0x30
 800028e:	466d      	mov	r5, sp
 8000290:	f106 0410 	add.w	r4, r6, #16
 8000294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800029a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800029c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002a8:	f000 fa0a 	bl	80006c0 <vUARTSend>
      toggleLed1;
 80002ac:	2120      	movs	r1, #32
 80002ae:	4816      	ldr	r0, [pc, #88]	; (8000308 <main+0x1ac>)
 80002b0:	f000 ff4a 	bl	8001148 <HAL_GPIO_TogglePin>

      /* Clear receive completed flag to continue receive another string*/
      ucTransmitCpltFlag = 0;
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <main+0x1d4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
    }

    if (Transfer_cplt)
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <main+0x1e4>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d01e      	beq.n	8000300 <main+0x1a4>
    {
      sprintf(buffer, "\r\nUART3 Received String: \"%s\"", Rx_Buffer); // IN bufer
 80002c2:	4a20      	ldr	r2, [pc, #128]	; (8000344 <main+0x1e8>)
 80002c4:	4920      	ldr	r1, [pc, #128]	; (8000348 <main+0x1ec>)
 80002c6:	4821      	ldr	r0, [pc, #132]	; (800034c <main+0x1f0>)
 80002c8:	f002 f852 	bl	8002370 <siprintf>
      vUARTSend(huart3, (uint8_t *)buffer);
 80002cc:	4e12      	ldr	r6, [pc, #72]	; (8000318 <main+0x1bc>)
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <main+0x1f0>)
 80002d0:	930c      	str	r3, [sp, #48]	; 0x30
 80002d2:	466d      	mov	r5, sp
 80002d4:	f106 0410 	add.w	r4, r6, #16
 80002d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002ec:	f000 f9e8 	bl	80006c0 <vUARTSend>
      toggleLed2;
 80002f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <main+0x1b0>)
 80002f6:	f000 ff27 	bl	8001148 <HAL_GPIO_TogglePin>

      Transfer_cplt = 0; //Reset lai bien tranfer_complete
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <main+0x1e4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(100);
 8000300:	2064      	movs	r0, #100	; 0x64
 8000302:	f000 fc09 	bl	8000b18 <HAL_Delay>
    toggleLed4; /* Check chip's halt */
 8000306:	e7b1      	b.n	800026c <main+0x110>
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40010800 	.word	0x40010800
 8000310:	20000144 	.word	0x20000144
 8000314:	200002c0 	.word	0x200002c0
 8000318:	20000148 	.word	0x20000148
 800031c:	08002bac 	.word	0x08002bac
 8000320:	08002bd4 	.word	0x08002bd4
 8000324:	08002c28 	.word	0x08002c28
 8000328:	08002c98 	.word	0x08002c98
 800032c:	08002cec 	.word	0x08002cec
 8000330:	20000254 	.word	0x20000254
 8000334:	20000098 	.word	0x20000098
 8000338:	08002d00 	.word	0x08002d00
 800033c:	20000188 	.word	0x20000188
 8000340:	20000141 	.word	0x20000141
 8000344:	20000258 	.word	0x20000258
 8000348:	08002d20 	.word	0x08002d20
 800034c:	200001f0 	.word	0x200001f0

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b090      	sub	sp, #64	; 0x40
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fffe 	bl	8002360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f000 ff0f 	bl	80011bc <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a4:	f000 f986 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f97a 	bl	80016bc <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f971 	bl	80006b4 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	; 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_USART2_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000414:	f001 faee 	bl	80019f4 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f949 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200002c0 	.word	0x200002c0
 800042c:	40004400 	.word	0x40004400

08000430 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <MX_USART3_UART_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_USART3_UART_Init+0x4c>)
 800043c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART3_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART3_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000468:	f001 fac4 	bl	80019f4 <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000472:	f000 f91f 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000148 	.word	0x20000148
 8000480:	40004800 	.word	0x40004800

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b41      	ldr	r3, [pc, #260]	; (80005a0 <MX_GPIO_Init+0x11c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a40      	ldr	r2, [pc, #256]	; (80005a0 <MX_GPIO_Init+0x11c>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b3e      	ldr	r3, [pc, #248]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b3b      	ldr	r3, [pc, #236]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a3a      	ldr	r2, [pc, #232]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a34      	ldr	r2, [pc, #208]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <MX_GPIO_Init+0x11c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004e8:	f000 fe16 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_8, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7190 	mov.w	r1, #288	; 0x120
 80004f2:	482d      	ldr	r0, [pc, #180]	; (80005a8 <MX_GPIO_Init+0x124>)
 80004f4:	f000 fe10 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
  GPIO_InitStruct.Pin = BT_UP_Pin | BT_CENTER_Pin | BT_DOWN_Pin;
 80004f8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fe:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_GPIO_Init+0x128>)
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2301      	movs	r3, #1
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4825      	ldr	r0, [pc, #148]	; (80005a4 <MX_GPIO_Init+0x120>)
 800050e:	f000 fca9 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_LEFT_Pin BT_RIGHT_Pin */
  GPIO_InitStruct.Pin = BT_LEFT_Pin | BT_RIGHT_Pin;
 8000512:	230c      	movs	r3, #12
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <MX_GPIO_Init+0x128>)
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4820      	ldr	r0, [pc, #128]	; (80005a8 <MX_GPIO_Init+0x124>)
 8000526:	f000 fc9d 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800052a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <MX_GPIO_Init+0x120>)
 8000544:	f000 fc8e 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_8;
 8000548:	f44f 7390 	mov.w	r3, #288	; 0x120
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2302      	movs	r3, #2
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_GPIO_Init+0x124>)
 8000562:	f000 fc7f 	bl	8000e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 4, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2104      	movs	r1, #4
 800056a:	2008      	movs	r0, #8
 800056c:	f000 fbcd 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000570:	2008      	movs	r0, #8
 8000572:	f000 fbe6 	bl	8000d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2102      	movs	r1, #2
 800057a:	2009      	movs	r0, #9
 800057c:	f000 fbc5 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000580:	2009      	movs	r0, #9
 8000582:	f000 fbde 	bl	8000d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2103      	movs	r1, #3
 800058a:	2017      	movs	r0, #23
 800058c:	f000 fbbd 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000590:	2017      	movs	r0, #23
 8000592:	f000 fbd6 	bl	8000d42 <HAL_NVIC_EnableIRQ>
}
 8000596:	bf00      	nop
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	10210000 	.word	0x10210000

080005b0 <HAL_UART_RxCpltCallback>:
 * @brief 
 * 
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  /* Process USART2 Receive_Cplt_IT */
  if (huart->Instance == USART2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a31      	ldr	r2, [pc, #196]	; (8000684 <HAL_UART_RxCpltCallback+0xd4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12b      	bne.n	800061a <HAL_UART_RxCpltCallback+0x6a>
  {
    /* Reset Receive Buffer whenever index_value = 0 */
    if (ucRxIndex == 0)
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10c      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x34>
    {
      for (i = 0; i < BUFFER_SIZE; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e006      	b.n	80005de <HAL_UART_RxCpltCallback+0x2e>
      {
        /* code */
        ucRxBuffer[i] = 0;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4a2e      	ldr	r2, [pc, #184]	; (800068c <HAL_UART_RxCpltCallback+0xdc>)
 80005d4:	2100      	movs	r1, #0
 80005d6:	54d1      	strb	r1, [r2, r3]
      for (i = 0; i < BUFFER_SIZE; i++)
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	3301      	adds	r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	2b63      	cmp	r3, #99	; 0x63
 80005e2:	d9f5      	bls.n	80005d0 <HAL_UART_RxCpltCallback+0x20>
      }
    }

    /* Case when user input data not equal to "\r" */
    if (ucRxData[0] != 13)
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <HAL_UART_RxCpltCallback+0xe0>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b0d      	cmp	r3, #13
 80005ea:	d00b      	beq.n	8000604 <HAL_UART_RxCpltCallback+0x54>
    {
      ucRxBuffer[ucRxIndex++] = ucRxData[0];
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	b2d1      	uxtb	r1, r2
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005f6:	7011      	strb	r1, [r2, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <HAL_UART_RxCpltCallback+0xe0>)
 80005fc:	7819      	ldrb	r1, [r3, #0]
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <HAL_UART_RxCpltCallback+0xdc>)
 8000600:	5499      	strb	r1, [r3, r2]
 8000602:	e005      	b.n	8000610 <HAL_UART_RxCpltCallback+0x60>
    }

    else /* Case when user input data = "\r" */
    {
      ucRxIndex = 0;
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
      ucTransmitCpltFlag = 1;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <HAL_UART_RxCpltCallback+0xe4>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
    }

    /* Trigger to Receive and jump into ISR on each ISR process is necessary */
    HAL_UART_Receive_IT(&huart2, (uint8_t *)ucRxData, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	491f      	ldr	r1, [pc, #124]	; (8000690 <HAL_UART_RxCpltCallback+0xe0>)
 8000614:	4820      	ldr	r0, [pc, #128]	; (8000698 <HAL_UART_RxCpltCallback+0xe8>)
 8000616:	f001 fad3 	bl	8001bc0 <HAL_UART_Receive_IT>
  }

  /* Process USART3 Receive_Cplt_IT */
  if (huart->Instance == USART3) //Check if UART3 receive data
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <HAL_UART_RxCpltCallback+0xec>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d12b      	bne.n	800067c <HAL_UART_RxCpltCallback+0xcc>
  {
    if (Rx_indx == 0)
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <HAL_UART_RxCpltCallback+0xf0>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10c      	bne.n	8000646 <HAL_UART_RxCpltCallback+0x96>
    {
      for (i = 0; i < BUFFER_SIZE; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e006      	b.n	8000640 <HAL_UART_RxCpltCallback+0x90>
        Rx_Buffer[i] = 0;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <HAL_UART_RxCpltCallback+0xf4>)
 8000636:	2100      	movs	r1, #0
 8000638:	54d1      	strb	r1, [r2, r3]
      for (i = 0; i < BUFFER_SIZE; i++)
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	3301      	adds	r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b63      	cmp	r3, #99	; 0x63
 8000644:	d9f5      	bls.n	8000632 <HAL_UART_RxCpltCallback+0x82>
    } //Clear Buffer when Rx_indx == 0

    if (Rx_data[0] != 13) //If Received byte != 13 (ENTER BUTTON ON KEYBOARD) by which means confirm sending string from keyboard is not yet made
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_UART_RxCpltCallback+0xf8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b0d      	cmp	r3, #13
 800064c:	d00b      	beq.n	8000666 <HAL_UART_RxCpltCallback+0xb6>
    {
      Rx_Buffer[Rx_indx++] = Rx_data[0]; //Continuously receive byte by byte into Rx_Buffer
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_UART_RxCpltCallback+0xf0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	b2d1      	uxtb	r1, r2
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_UART_RxCpltCallback+0xf0>)
 8000658:	7011      	strb	r1, [r2, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_UART_RxCpltCallback+0xf8>)
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_UART_RxCpltCallback+0xf4>)
 8000662:	5499      	strb	r1, [r3, r2]
 8000664:	e005      	b.n	8000672 <HAL_UART_RxCpltCallback+0xc2>
    }

    else //ENTER BUTTON is pressed ==> User confirm to send a string

    {
      Rx_indx = 0;       //Reset Rx_indx to start receiving another string
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_UART_RxCpltCallback+0xf0>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
      Transfer_cplt = 1; //Set Transfer_cplt to 1 to inform about receiving previous string succesful
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_UART_RxCpltCallback+0xfc>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive_IT(&huart3, (uint8_t *)Rx_data, 1); //UART3 RECEIVE_IT need to re-trigger to continue working or else stop receiving
 8000672:	2201      	movs	r2, #1
 8000674:	490c      	ldr	r1, [pc, #48]	; (80006a8 <HAL_UART_RxCpltCallback+0xf8>)
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <HAL_UART_RxCpltCallback+0x100>)
 8000678:	f001 faa2 	bl	8001bc0 <HAL_UART_Receive_IT>
  }
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	200002bc 	.word	0x200002bc
 800068c:	20000098 	.word	0x20000098
 8000690:	20000144 	.word	0x20000144
 8000694:	20000254 	.word	0x20000254
 8000698:	200002c0 	.word	0x200002c0
 800069c:	40004800 	.word	0x40004800
 80006a0:	20000142 	.word	0x20000142
 80006a4:	20000258 	.word	0x20000258
 80006a8:	200001ec 	.word	0x200001ec
 80006ac:	20000141 	.word	0x20000141
 80006b0:	20000148 	.word	0x20000148

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <vUARTSend>:
#include "myLib.h"

void vUARTSend(UART_HandleTypeDef huart, uint8_t *String)
{
 80006c0:	b084      	sub	sp, #16
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	f107 0c08 	add.w	ip, r7, #8
 80006ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char *)String), defineUART_TX_DELAY);
 80006ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006d0:	f7ff fd3c 	bl	800014c <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	230a      	movs	r3, #10
 80006da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80006dc:	f107 0008 	add.w	r0, r7, #8
 80006e0:	f001 f9d5 	bl	8001a8e <HAL_UART_Transmit>
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_MspInit+0x5c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <HAL_MspInit+0x5c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_MspInit+0x60>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_MspInit+0x60>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40021000 	.word	0x40021000
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a3f      	ldr	r2, [pc, #252]	; (800086c <HAL_UART_MspInit+0x118>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d138      	bne.n	80007e6 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000774:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <HAL_UART_MspInit+0x11c>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a3d      	ldr	r2, [pc, #244]	; (8000870 <HAL_UART_MspInit+0x11c>)
 800077a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <HAL_UART_MspInit+0x11c>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <HAL_UART_MspInit+0x11c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a37      	ldr	r2, [pc, #220]	; (8000870 <HAL_UART_MspInit+0x11c>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_UART_MspInit+0x11c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007a4:	2304      	movs	r3, #4
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	4619      	mov	r1, r3
 80007b6:	482f      	ldr	r0, [pc, #188]	; (8000874 <HAL_UART_MspInit+0x120>)
 80007b8:	f000 fb54 	bl	8000e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007bc:	2308      	movs	r3, #8
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4829      	ldr	r0, [pc, #164]	; (8000874 <HAL_UART_MspInit+0x120>)
 80007d0:	f000 fb48 	bl	8000e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	2026      	movs	r0, #38	; 0x26
 80007da:	f000 fa96 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007de:	2026      	movs	r0, #38	; 0x26
 80007e0:	f000 faaf 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007e4:	e03e      	b.n	8000864 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_UART_MspInit+0x124>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d139      	bne.n	8000864 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_UART_MspInit+0x11c>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_UART_MspInit+0x11c>)
 80007f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007fa:	61d3      	str	r3, [r2, #28]
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_UART_MspInit+0x11c>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_UART_MspInit+0x11c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <HAL_UART_MspInit+0x11c>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_UART_MspInit+0x11c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <HAL_UART_MspInit+0x128>)
 8000836:	f000 fb15 	bl	8000e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800083a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_UART_MspInit+0x128>)
 8000850:	f000 fb08 	bl	8000e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2027      	movs	r0, #39	; 0x27
 800085a:	f000 fa56 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800085e:	2027      	movs	r0, #39	; 0x27
 8000860:	f000 fa6f 	bl	8000d42 <HAL_NVIC_EnableIRQ>
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004400 	.word	0x40004400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800
 8000878:	40004800 	.word	0x40004800
 800087c:	40010c00 	.word	0x40010c00

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <HardFault_Handler+0x4>

08000892 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <BusFault_Handler+0x4>

0800089e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f908 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80008d8:	2004      	movs	r0, #4
 80008da:	f000 fc4d 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80008e6:	2008      	movs	r0, #8
 80008e8:	f000 fc46 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80008f4:	2040      	movs	r0, #64	; 0x40
 80008f6:	f000 fc3f 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80008fa:	2080      	movs	r0, #128	; 0x80
 80008fc:	f000 fc3c 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000900:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000904:	f000 fc38 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <USART2_IRQHandler+0x10>)
 8000912:	f001 f9a9 	bl	8001c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200002c0 	.word	0x200002c0

08000920 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USART3_IRQHandler+0x10>)
 8000926:	f001 f99f 	bl	8001c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000148 	.word	0x20000148

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f001 fcd2 	bl	800230c <__errno>
 8000968:	4602      	mov	r2, r0
 800096a:	230c      	movs	r3, #12
 800096c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20005000 	.word	0x20005000
 8000994:	00000400 	.word	0x00000400
 8000998:	2000008c 	.word	0x2000008c
 800099c:	20000310 	.word	0x20000310

080009a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <SystemInit+0x5c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <SystemInit+0x5c>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <SystemInit+0x5c>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4911      	ldr	r1, [pc, #68]	; (80009fc <SystemInit+0x5c>)
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <SystemInit+0x60>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <SystemInit+0x5c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <SystemInit+0x5c>)
 80009c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <SystemInit+0x5c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <SystemInit+0x5c>)
 80009d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SystemInit+0x5c>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <SystemInit+0x5c>)
 80009de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SystemInit+0x5c>)
 80009e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SystemInit+0x64>)
 80009ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000
 8000a00:	f8ff0000 	.word	0xf8ff0000
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a0a:	e003      	b.n	8000a14 <LoopCopyDataInit>

08000a0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a12:	3104      	adds	r1, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a1c:	d3f6      	bcc.n	8000a0c <CopyDataInit>
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a20:	e002      	b.n	8000a28 <LoopFillZerobss>

08000a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a24:	f842 3b04 	str.w	r3, [r2], #4

08000a28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a2c:	d3f9      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2e:	f7ff ffb7 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f001 fc71 	bl	8002318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff fb91 	bl	800015c <main>
  bx lr
 8000a3a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a3c:	08002da8 	.word	0x08002da8
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a44:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000a48:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000a4c:	2000030c 	.word	0x2000030c

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x28>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f945 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fe3e 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f95d 	bl	8000d5e <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 f925 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000304 	.word	0x20000304

08000b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000304 	.word	0x20000304

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_Delay+0x40>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <__NVIC_EnableIRQ+0x34>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff90 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2d 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff42 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff90 	bl	8000c4c <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5f 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff35 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d005      	beq.n	8000d9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2204      	movs	r2, #4
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e051      	b.n	8000e3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 020e 	bic.w	r2, r2, #14
 8000da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0201 	bic.w	r2, r2, #1
 8000db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <HAL_DMA_Abort_IT+0xd0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d029      	beq.n	8000e18 <HAL_DMA_Abort_IT+0xa0>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_DMA_Abort_IT+0xd4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d022      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x9c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_DMA_Abort_IT+0xd8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d01a      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x96>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_DMA_Abort_IT+0xdc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d012      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x90>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <HAL_DMA_Abort_IT+0xe0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00a      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x8a>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <HAL_DMA_Abort_IT+0xe4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d102      	bne.n	8000dfc <HAL_DMA_Abort_IT+0x84>
 8000df6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dfa:	e00e      	b.n	8000e1a <HAL_DMA_Abort_IT+0xa2>
 8000dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e00:	e00b      	b.n	8000e1a <HAL_DMA_Abort_IT+0xa2>
 8000e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e06:	e008      	b.n	8000e1a <HAL_DMA_Abort_IT+0xa2>
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	e005      	b.n	8000e1a <HAL_DMA_Abort_IT+0xa2>
 8000e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e12:	e002      	b.n	8000e1a <HAL_DMA_Abort_IT+0xa2>
 8000e14:	2310      	movs	r3, #16
 8000e16:	e000      	b.n	8000e1a <HAL_DMA_Abort_IT+0xa2>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_DMA_Abort_IT+0xe8>)
 8000e1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	4798      	blx	r3
    } 
  }
  return status;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020008 	.word	0x40020008
 8000e4c:	4002001c 	.word	0x4002001c
 8000e50:	40020030 	.word	0x40020030
 8000e54:	40020044 	.word	0x40020044
 8000e58:	40020058 	.word	0x40020058
 8000e5c:	4002006c 	.word	0x4002006c
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b08b      	sub	sp, #44	; 0x2c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e76:	e127      	b.n	80010c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8116 	bne.w	80010c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d034      	beq.n	8000f08 <HAL_GPIO_Init+0xa4>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d80d      	bhi.n	8000ebe <HAL_GPIO_Init+0x5a>
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d02b      	beq.n	8000efe <HAL_GPIO_Init+0x9a>
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d804      	bhi.n	8000eb4 <HAL_GPIO_Init+0x50>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d031      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d01c      	beq.n	8000eec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eb2:	e048      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d043      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
 8000eb8:	2b11      	cmp	r3, #17
 8000eba:	d01b      	beq.n	8000ef4 <HAL_GPIO_Init+0x90>
          break;
 8000ebc:	e043      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ebe:	4a89      	ldr	r2, [pc, #548]	; (80010e4 <HAL_GPIO_Init+0x280>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d026      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
 8000ec4:	4a87      	ldr	r2, [pc, #540]	; (80010e4 <HAL_GPIO_Init+0x280>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d806      	bhi.n	8000ed8 <HAL_GPIO_Init+0x74>
 8000eca:	4a87      	ldr	r2, [pc, #540]	; (80010e8 <HAL_GPIO_Init+0x284>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d020      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
 8000ed0:	4a86      	ldr	r2, [pc, #536]	; (80010ec <HAL_GPIO_Init+0x288>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01d      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
          break;
 8000ed6:	e036      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ed8:	4a85      	ldr	r2, [pc, #532]	; (80010f0 <HAL_GPIO_Init+0x28c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
 8000ede:	4a85      	ldr	r2, [pc, #532]	; (80010f4 <HAL_GPIO_Init+0x290>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d016      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
 8000ee4:	4a84      	ldr	r2, [pc, #528]	; (80010f8 <HAL_GPIO_Init+0x294>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0xae>
          break;
 8000eea:	e02c      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e028      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e023      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	3308      	adds	r3, #8
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e01e      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	330c      	adds	r3, #12
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e019      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e012      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	611a      	str	r2, [r3, #16]
          break;
 8000f32:	e008      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	615a      	str	r2, [r3, #20]
          break;
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2bff      	cmp	r3, #255	; 0xff
 8000f4a:	d801      	bhi.n	8000f50 <HAL_GPIO_Init+0xec>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	e001      	b.n	8000f54 <HAL_GPIO_Init+0xf0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3304      	adds	r3, #4
 8000f54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2bff      	cmp	r3, #255	; 0xff
 8000f5a:	d802      	bhi.n	8000f62 <HAL_GPIO_Init+0xfe>
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_Init+0x104>
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3b08      	subs	r3, #8
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	210f      	movs	r1, #15
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	401a      	ands	r2, r3
 8000f7a:	6a39      	ldr	r1, [r7, #32]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	431a      	orrs	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 8096 	beq.w	80010c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <HAL_GPIO_Init+0x298>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x298>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b56      	ldr	r3, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x298>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fae:	4a54      	ldr	r2, [pc, #336]	; (8001100 <HAL_GPIO_Init+0x29c>)
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <HAL_GPIO_Init+0x2a0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x19e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <HAL_GPIO_Init+0x2a4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x19a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_GPIO_Init+0x2a8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x196>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_GPIO_Init+0x2ac>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x192>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x1a0>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x1a0>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x1a0>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x1a0>
 8001002:	2300      	movs	r3, #0
 8001004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001014:	493a      	ldr	r1, [pc, #232]	; (8001100 <HAL_GPIO_Init+0x29c>)
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4938      	ldr	r1, [pc, #224]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	43db      	mvns	r3, r3
 8001044:	4933      	ldr	r1, [pc, #204]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001046:	4013      	ands	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	492e      	ldr	r1, [pc, #184]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	43db      	mvns	r3, r3
 800106c:	4929      	ldr	r1, [pc, #164]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 800106e:	4013      	ands	r3, r2
 8001070:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	4924      	ldr	r1, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	608b      	str	r3, [r1, #8]
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	43db      	mvns	r3, r3
 8001094:	491f      	ldr	r1, [pc, #124]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 8001096:	4013      	ands	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	491a      	ldr	r1, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60cb      	str	r3, [r1, #12]
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4915      	ldr	r1, [pc, #84]	; (8001114 <HAL_GPIO_Init+0x2b0>)
 80010be:	4013      	ands	r3, r2
 80010c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f aed0 	bne.w	8000e78 <HAL_GPIO_Init+0x14>
  }
}
 80010d8:	bf00      	nop
 80010da:	372c      	adds	r7, #44	; 0x2c
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	10210000 	.word	0x10210000
 80010e8:	10110000 	.word	0x10110000
 80010ec:	10120000 	.word	0x10120000
 80010f0:	10310000 	.word	0x10310000
 80010f4:	10320000 	.word	0x10320000
 80010f8:	10220000 	.word	0x10220000
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	40010800 	.word	0x40010800
 8001108:	40010c00 	.word	0x40010c00
 800110c:	40011000 	.word	0x40011000
 8001110:	40011400 	.word	0x40011400
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	611a      	str	r2, [r3, #16]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001160:	887a      	ldrh	r2, [r7, #2]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001166:	e002      	b.n	800116e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	611a      	str	r2, [r3, #16]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f806 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e26c      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8087 	beq.w	80012ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011dc:	4b92      	ldr	r3, [pc, #584]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d00c      	beq.n	8001202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d112      	bne.n	800121a <HAL_RCC_OscConfig+0x5e>
 80011f4:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d10b      	bne.n	800121a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d06c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x12c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d168      	bne.n	80012e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e246      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x76>
 8001224:	4b80      	ldr	r3, [pc, #512]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a7f      	ldr	r2, [pc, #508]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e02e      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x98>
 800123a:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b78      	ldr	r3, [pc, #480]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a77      	ldr	r2, [pc, #476]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0xbc>
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a71      	ldr	r2, [pc, #452]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001278:	4b6b      	ldr	r3, [pc, #428]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a67      	ldr	r2, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc34 	bl	8000b04 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc30 	bl	8000b04 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1fa      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe4>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc20 	bl	8000b04 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc1c 	bl	8000b04 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1e6      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x10c>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1ba      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4939      	ldr	r1, [pc, #228]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fbd5 	bl	8000b04 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fbd1 	bl	8000b04 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e19b      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fbb4 	bl	8000b04 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbb0 	bl	8000b04 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e17a      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03a      	beq.n	8001440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d019      	beq.n	8001406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fb94 	bl	8000b04 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb90 	bl	8000b04 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e15a      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f000 fada 	bl	80019b8 <RCC_Delay>
 8001404:	e01c      	b.n	8001440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fb7a 	bl	8000b04 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001412:	e00f      	b.n	8001434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fb76 	bl	8000b04 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d908      	bls.n	8001434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e140      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	42420000 	.word	0x42420000
 8001430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b9e      	ldr	r3, [pc, #632]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e9      	bne.n	8001414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a6 	beq.w	800159a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10d      	bne.n	800147a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b94      	ldr	r3, [pc, #592]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a93      	ldr	r2, [pc, #588]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b8e      	ldr	r3, [pc, #568]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4b8b      	ldr	r3, [pc, #556]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a8a      	ldr	r2, [pc, #552]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb37 	bl	8000b04 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fb33 	bl	8000b04 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0fd      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x312>
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e02d      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x334>
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a72      	ldr	r2, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	e01c      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x356>
 80014f8:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fae7 	bl	8000b04 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fae3 	bl	8000b04 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0ab      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	4b57      	ldr	r3, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ee      	beq.n	800153a <HAL_RCC_OscConfig+0x37e>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fad1 	bl	8000b04 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff facd 	bl	8000b04 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e095      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158e:	4b48      	ldr	r3, [pc, #288]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8081 	beq.w	80016a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d061      	beq.n	8001674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d146      	bne.n	8001646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_OscConfig+0x4fc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff faa1 	bl	8000b04 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fa9d 	bl	8000b04 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e067      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d108      	bne.n	8001600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	492d      	ldr	r1, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a19      	ldr	r1, [r3, #32]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	430b      	orrs	r3, r1
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x4fc>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fa71 	bl	8000b04 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fa6d 	bl	8000b04 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e037      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x46a>
 8001644:	e02f      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x4fc>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fa5a 	bl	8000b04 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fa56 	bl	8000b04 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e020      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x498>
 8001672:	e018      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x4f4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	429a      	cmp	r2, r3
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42420060 	.word	0x42420060

080016bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0d0      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d910      	bls.n	8001700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 0207 	bic.w	r2, r3, #7
 80016e6:	4965      	ldr	r1, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800173a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d040      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d115      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e073      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06b      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4936      	ldr	r1, [pc, #216]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f9aa 	bl	8000b04 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f9a6 	bl	8000b04 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e053      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d210      	bcs.n	800180c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0207 	bic.w	r2, r3, #7
 80017f2:	4922      	ldr	r1, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	fa21 f303 	lsr.w	r3, r1, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1cc>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f908 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000
 8001880:	40021000 	.word	0x40021000
 8001884:	08002d54 	.word	0x08002d54
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b490      	push	{r4, r7}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001898:	1d3c      	adds	r4, r7, #4
 800189a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x40>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x46>
 80018ce:	e02d      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018d2:	623b      	str	r3, [r7, #32]
      break;
 80018d4:	e02d      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018e2:	4413      	add	r3, r2
 80018e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c5b      	lsrs	r3, r3, #17
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001902:	4413      	add	r3, r2
 8001904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 800190e:	fb02 f203 	mul.w	r2, r2, r3
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	e004      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	623b      	str	r3, [r7, #32]
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RCC_GetSysClockFreq+0xbc>)
 800192e:	623b      	str	r3, [r7, #32]
      break;
 8001930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001932:	6a3b      	ldr	r3, [r7, #32]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bc90      	pop	{r4, r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	08002d40 	.word	0x08002d40
 8001944:	08002d50 	.word	0x08002d50
 8001948:	40021000 	.word	0x40021000
 800194c:	007a1200 	.word	0x007a1200
 8001950:	003d0900 	.word	0x003d0900

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_RCC_GetHCLKFreq+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff2 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001970:	4601      	mov	r1, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	08002d64 	.word	0x08002d64

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff ffde 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001998:	4601      	mov	r1, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0adb      	lsrs	r3, r3, #11
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08002d64 	.word	0x08002d64

080019b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <RCC_Delay+0x34>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <RCC_Delay+0x38>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a5b      	lsrs	r3, r3, #9
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d4:	bf00      	nop
  }
  while (Delay --);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	60fa      	str	r2, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f9      	bne.n	80019d4 <RCC_Delay+0x1c>
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e03f      	b.n	8001a86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fe9a 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fb8d 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b088      	sub	sp, #32
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	f040 8083 	bne.w	8001bb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_UART_Transmit+0x2e>
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e07b      	b.n	8001bb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Transmit+0x40>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e074      	b.n	8001bb8 <HAL_UART_Transmit+0x12a>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2221      	movs	r2, #33	; 0x21
 8001ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f80e 	bl	8000b04 <HAL_GetTick>
 8001ae8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001af6:	e042      	b.n	8001b7e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0e:	d122      	bne.n	8001b56 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f9b2 	bl	8001e84 <UART_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e046      	b.n	8001bb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	e017      	b.n	8001b7e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	e013      	b.n	8001b7e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f98f 	bl	8001e84 <UART_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e023      	b.n	8001bb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1b7      	bne.n	8001af8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f976 	bl	8001e84 <UART_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e00a      	b.n	8001bb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d140      	bne.n	8001c5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_UART_Receive_IT+0x26>
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e039      	b.n	8001c5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_UART_Receive_IT+0x38>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e032      	b.n	8001c5e <HAL_UART_Receive_IT+0x9e>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	88fa      	ldrh	r2, [r7, #6]
 8001c0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2222      	movs	r2, #34	; 0x22
 8001c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e000      	b.n	8001c5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001c5c:	2302      	movs	r3, #2
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_UART_IRQHandler+0x52>
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f9ce 	bl	8002054 <UART_Receive_IT>
      return;
 8001cb8:	e0cc      	b.n	8001e54 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80ab 	beq.w	8001e18 <HAL_UART_IRQHandler+0x1b0>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_UART_IRQHandler+0x70>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80a0 	beq.w	8001e18 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_UART_IRQHandler+0x90>
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_UART_IRQHandler+0xb0>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_UART_IRQHandler+0xd0>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_IRQHandler+0xf0>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	f043 0208 	orr.w	r2, r3, #8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d078      	beq.n	8001e52 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_UART_IRQHandler+0x112>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f96d 	bl	8002054 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <HAL_UART_IRQHandler+0x13a>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d031      	beq.n	8001e06 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8b8 	bl	8001f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d013      	beq.n	8001df6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd2:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_UART_IRQHandler+0x1f4>)
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe ffcc 	bl	8000d78 <HAL_DMA_Abort_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001df0:	4610      	mov	r0, r2
 8001df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df4:	e00e      	b.n	8001e14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f83b 	bl	8001e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfc:	e00a      	b.n	8001e14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f837 	bl	8001e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e04:	e006      	b.n	8001e14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f833 	bl	8001e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e12:	e01e      	b.n	8001e52 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	bf00      	nop
    return;
 8001e16:	e01c      	b.n	8001e52 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_UART_IRQHandler+0x1cc>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8a4 	bl	8001f7a <UART_Transmit_IT>
    return;
 8001e32:	e00f      	b.n	8001e54 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_UART_IRQHandler+0x1ec>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8eb 	bl	8002024 <UART_EndTransmit_IT>
    return;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001e52:	bf00      	nop
  }
}
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08001f53 	.word	0x08001f53

08001e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e94:	e02c      	b.n	8001ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d028      	beq.n	8001ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ea4:	f7fe fe2e 	bl	8000b04 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d21d      	bcs.n	8001ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ec2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e00f      	b.n	8001f10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d0c3      	beq.n	8001e96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff ff80 	bl	8001e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b21      	cmp	r3, #33	; 0x21
 8001f8c:	d144      	bne.n	8002018 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f96:	d11a      	bne.n	8001fce <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fac:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	1c9a      	adds	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	e00e      	b.n	8001fe0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	621a      	str	r2, [r3, #32]
 8001fcc:	e008      	b.n	8001fe0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6211      	str	r1, [r2, #32]
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4619      	mov	r1, r3
 8001fee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff0b 	bl	8001e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b22      	cmp	r3, #34	; 0x22
 8002066:	d171      	bne.n	800214c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002070:	d123      	bne.n	80020ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10e      	bne.n	800209e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	b29b      	uxth	r3, r3
 8002088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	1c9a      	adds	r2, r3, #2
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
 800209c:	e029      	b.n	80020f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
 80020b8:	e01b      	b.n	80020f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10a      	bne.n	80020d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6858      	ldr	r0, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	1c59      	adds	r1, r3, #1
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6291      	str	r1, [r2, #40]	; 0x28
 80020d2:	b2c2      	uxtb	r2, r0
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e00c      	b.n	80020f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	1c58      	adds	r0, r3, #1
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6288      	str	r0, [r1, #40]	; 0x28
 80020ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4619      	mov	r1, r3
 8002100:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002102:	2b00      	cmp	r3, #0
 8002104:	d120      	bne.n	8002148 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0220 	bic.w	r2, r2, #32
 8002114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002124:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fa36 	bl	80005b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e002      	b.n	800214e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a52      	ldr	r2, [pc, #328]	; (8002304 <UART_SetConfig+0x1ac>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d14e      	bne.n	800225e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff fbe6 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 80021c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009a      	lsls	r2, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <UART_SetConfig+0x1b0>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	0119      	lsls	r1, r3, #4
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009a      	lsls	r2, r3, #2
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <UART_SetConfig+0x1b0>)
 80021fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2064      	movs	r0, #100	; 0x64
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3332      	adds	r3, #50	; 0x32
 8002210:	4a3d      	ldr	r2, [pc, #244]	; (8002308 <UART_SetConfig+0x1b0>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221c:	4419      	add	r1, r3
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	009a      	lsls	r2, r3, #2
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fbb2 f2f3 	udiv	r2, r2, r3
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <UART_SetConfig+0x1b0>)
 8002236:	fba3 0302 	umull	r0, r3, r3, r2
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2064      	movs	r0, #100	; 0x64
 800223e:	fb00 f303 	mul.w	r3, r0, r3
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	3332      	adds	r3, #50	; 0x32
 8002248:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <UART_SetConfig+0x1b0>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	f003 020f 	and.w	r2, r3, #15
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	440a      	add	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800225c:	e04d      	b.n	80022fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800225e:	f7ff fb83 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8002262:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	009a      	lsls	r2, r3, #2
 800226e:	441a      	add	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <UART_SetConfig+0x1b0>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	0119      	lsls	r1, r3, #4
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fbb2 f2f3 	udiv	r2, r2, r3
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <UART_SetConfig+0x1b0>)
 800229c:	fba3 0302 	umull	r0, r3, r3, r2
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	2064      	movs	r0, #100	; 0x64
 80022a4:	fb00 f303 	mul.w	r3, r0, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	3332      	adds	r3, #50	; 0x32
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <UART_SetConfig+0x1b0>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	4419      	add	r1, r3
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <UART_SetConfig+0x1b0>)
 80022d4:	fba3 0302 	umull	r0, r3, r3, r2
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	2064      	movs	r0, #100	; 0x64
 80022dc:	fb00 f303 	mul.w	r3, r0, r3
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	3332      	adds	r3, #50	; 0x32
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <UART_SetConfig+0x1b0>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	440a      	add	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40013800 	.word	0x40013800
 8002308:	51eb851f 	.word	0x51eb851f

0800230c <__errno>:
 800230c:	4b01      	ldr	r3, [pc, #4]	; (8002314 <__errno+0x8>)
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c

08002318 <__libc_init_array>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	2500      	movs	r5, #0
 800231c:	4e0c      	ldr	r6, [pc, #48]	; (8002350 <__libc_init_array+0x38>)
 800231e:	4c0d      	ldr	r4, [pc, #52]	; (8002354 <__libc_init_array+0x3c>)
 8002320:	1ba4      	subs	r4, r4, r6
 8002322:	10a4      	asrs	r4, r4, #2
 8002324:	42a5      	cmp	r5, r4
 8002326:	d109      	bne.n	800233c <__libc_init_array+0x24>
 8002328:	f000 fc34 	bl	8002b94 <_init>
 800232c:	2500      	movs	r5, #0
 800232e:	4e0a      	ldr	r6, [pc, #40]	; (8002358 <__libc_init_array+0x40>)
 8002330:	4c0a      	ldr	r4, [pc, #40]	; (800235c <__libc_init_array+0x44>)
 8002332:	1ba4      	subs	r4, r4, r6
 8002334:	10a4      	asrs	r4, r4, #2
 8002336:	42a5      	cmp	r5, r4
 8002338:	d105      	bne.n	8002346 <__libc_init_array+0x2e>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002340:	4798      	blx	r3
 8002342:	3501      	adds	r5, #1
 8002344:	e7ee      	b.n	8002324 <__libc_init_array+0xc>
 8002346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800234a:	4798      	blx	r3
 800234c:	3501      	adds	r5, #1
 800234e:	e7f2      	b.n	8002336 <__libc_init_array+0x1e>
 8002350:	08002da0 	.word	0x08002da0
 8002354:	08002da0 	.word	0x08002da0
 8002358:	08002da0 	.word	0x08002da0
 800235c:	08002da4 	.word	0x08002da4

08002360 <memset>:
 8002360:	4603      	mov	r3, r0
 8002362:	4402      	add	r2, r0
 8002364:	4293      	cmp	r3, r2
 8002366:	d100      	bne.n	800236a <memset+0xa>
 8002368:	4770      	bx	lr
 800236a:	f803 1b01 	strb.w	r1, [r3], #1
 800236e:	e7f9      	b.n	8002364 <memset+0x4>

08002370 <siprintf>:
 8002370:	b40e      	push	{r1, r2, r3}
 8002372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002376:	b500      	push	{lr}
 8002378:	b09c      	sub	sp, #112	; 0x70
 800237a:	ab1d      	add	r3, sp, #116	; 0x74
 800237c:	9002      	str	r0, [sp, #8]
 800237e:	9006      	str	r0, [sp, #24]
 8002380:	9107      	str	r1, [sp, #28]
 8002382:	9104      	str	r1, [sp, #16]
 8002384:	4808      	ldr	r0, [pc, #32]	; (80023a8 <siprintf+0x38>)
 8002386:	4909      	ldr	r1, [pc, #36]	; (80023ac <siprintf+0x3c>)
 8002388:	f853 2b04 	ldr.w	r2, [r3], #4
 800238c:	9105      	str	r1, [sp, #20]
 800238e:	6800      	ldr	r0, [r0, #0]
 8002390:	a902      	add	r1, sp, #8
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	f000 f866 	bl	8002464 <_svfiprintf_r>
 8002398:	2200      	movs	r2, #0
 800239a:	9b02      	ldr	r3, [sp, #8]
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	b01c      	add	sp, #112	; 0x70
 80023a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80023a4:	b003      	add	sp, #12
 80023a6:	4770      	bx	lr
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	ffff0208 	.word	0xffff0208

080023b0 <__ssputs_r>:
 80023b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b4:	688e      	ldr	r6, [r1, #8]
 80023b6:	4682      	mov	sl, r0
 80023b8:	429e      	cmp	r6, r3
 80023ba:	460c      	mov	r4, r1
 80023bc:	4690      	mov	r8, r2
 80023be:	4699      	mov	r9, r3
 80023c0:	d837      	bhi.n	8002432 <__ssputs_r+0x82>
 80023c2:	898a      	ldrh	r2, [r1, #12]
 80023c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023c8:	d031      	beq.n	800242e <__ssputs_r+0x7e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	6825      	ldr	r5, [r4, #0]
 80023ce:	6909      	ldr	r1, [r1, #16]
 80023d0:	1a6f      	subs	r7, r5, r1
 80023d2:	6965      	ldr	r5, [r4, #20]
 80023d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80023dc:	f109 0301 	add.w	r3, r9, #1
 80023e0:	443b      	add	r3, r7
 80023e2:	429d      	cmp	r5, r3
 80023e4:	bf38      	it	cc
 80023e6:	461d      	movcc	r5, r3
 80023e8:	0553      	lsls	r3, r2, #21
 80023ea:	d530      	bpl.n	800244e <__ssputs_r+0x9e>
 80023ec:	4629      	mov	r1, r5
 80023ee:	f000 fb37 	bl	8002a60 <_malloc_r>
 80023f2:	4606      	mov	r6, r0
 80023f4:	b950      	cbnz	r0, 800240c <__ssputs_r+0x5c>
 80023f6:	230c      	movs	r3, #12
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f8ca 3000 	str.w	r3, [sl]
 8002400:	89a3      	ldrh	r3, [r4, #12]
 8002402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800240c:	463a      	mov	r2, r7
 800240e:	6921      	ldr	r1, [r4, #16]
 8002410:	f000 fab6 	bl	8002980 <memcpy>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800241a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	6126      	str	r6, [r4, #16]
 8002422:	443e      	add	r6, r7
 8002424:	6026      	str	r6, [r4, #0]
 8002426:	464e      	mov	r6, r9
 8002428:	6165      	str	r5, [r4, #20]
 800242a:	1bed      	subs	r5, r5, r7
 800242c:	60a5      	str	r5, [r4, #8]
 800242e:	454e      	cmp	r6, r9
 8002430:	d900      	bls.n	8002434 <__ssputs_r+0x84>
 8002432:	464e      	mov	r6, r9
 8002434:	4632      	mov	r2, r6
 8002436:	4641      	mov	r1, r8
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	f000 faac 	bl	8002996 <memmove>
 800243e:	68a3      	ldr	r3, [r4, #8]
 8002440:	2000      	movs	r0, #0
 8002442:	1b9b      	subs	r3, r3, r6
 8002444:	60a3      	str	r3, [r4, #8]
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	441e      	add	r6, r3
 800244a:	6026      	str	r6, [r4, #0]
 800244c:	e7dc      	b.n	8002408 <__ssputs_r+0x58>
 800244e:	462a      	mov	r2, r5
 8002450:	f000 fb60 	bl	8002b14 <_realloc_r>
 8002454:	4606      	mov	r6, r0
 8002456:	2800      	cmp	r0, #0
 8002458:	d1e2      	bne.n	8002420 <__ssputs_r+0x70>
 800245a:	6921      	ldr	r1, [r4, #16]
 800245c:	4650      	mov	r0, sl
 800245e:	f000 fab3 	bl	80029c8 <_free_r>
 8002462:	e7c8      	b.n	80023f6 <__ssputs_r+0x46>

08002464 <_svfiprintf_r>:
 8002464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002468:	461d      	mov	r5, r3
 800246a:	898b      	ldrh	r3, [r1, #12]
 800246c:	b09d      	sub	sp, #116	; 0x74
 800246e:	061f      	lsls	r7, r3, #24
 8002470:	4680      	mov	r8, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4616      	mov	r6, r2
 8002476:	d50f      	bpl.n	8002498 <_svfiprintf_r+0x34>
 8002478:	690b      	ldr	r3, [r1, #16]
 800247a:	b96b      	cbnz	r3, 8002498 <_svfiprintf_r+0x34>
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	f000 faef 	bl	8002a60 <_malloc_r>
 8002482:	6020      	str	r0, [r4, #0]
 8002484:	6120      	str	r0, [r4, #16]
 8002486:	b928      	cbnz	r0, 8002494 <_svfiprintf_r+0x30>
 8002488:	230c      	movs	r3, #12
 800248a:	f8c8 3000 	str.w	r3, [r8]
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	e0c8      	b.n	8002626 <_svfiprintf_r+0x1c2>
 8002494:	2340      	movs	r3, #64	; 0x40
 8002496:	6163      	str	r3, [r4, #20]
 8002498:	2300      	movs	r3, #0
 800249a:	9309      	str	r3, [sp, #36]	; 0x24
 800249c:	2320      	movs	r3, #32
 800249e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024a2:	2330      	movs	r3, #48	; 0x30
 80024a4:	f04f 0b01 	mov.w	fp, #1
 80024a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024ac:	9503      	str	r5, [sp, #12]
 80024ae:	4637      	mov	r7, r6
 80024b0:	463d      	mov	r5, r7
 80024b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80024b6:	b10b      	cbz	r3, 80024bc <_svfiprintf_r+0x58>
 80024b8:	2b25      	cmp	r3, #37	; 0x25
 80024ba:	d13e      	bne.n	800253a <_svfiprintf_r+0xd6>
 80024bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80024c0:	d00b      	beq.n	80024da <_svfiprintf_r+0x76>
 80024c2:	4653      	mov	r3, sl
 80024c4:	4632      	mov	r2, r6
 80024c6:	4621      	mov	r1, r4
 80024c8:	4640      	mov	r0, r8
 80024ca:	f7ff ff71 	bl	80023b0 <__ssputs_r>
 80024ce:	3001      	adds	r0, #1
 80024d0:	f000 80a4 	beq.w	800261c <_svfiprintf_r+0x1b8>
 80024d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024d6:	4453      	add	r3, sl
 80024d8:	9309      	str	r3, [sp, #36]	; 0x24
 80024da:	783b      	ldrb	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 809d 	beq.w	800261c <_svfiprintf_r+0x1b8>
 80024e2:	2300      	movs	r3, #0
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024ec:	9304      	str	r3, [sp, #16]
 80024ee:	9307      	str	r3, [sp, #28]
 80024f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024f4:	931a      	str	r3, [sp, #104]	; 0x68
 80024f6:	462f      	mov	r7, r5
 80024f8:	2205      	movs	r2, #5
 80024fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80024fe:	4850      	ldr	r0, [pc, #320]	; (8002640 <_svfiprintf_r+0x1dc>)
 8002500:	f000 fa30 	bl	8002964 <memchr>
 8002504:	9b04      	ldr	r3, [sp, #16]
 8002506:	b9d0      	cbnz	r0, 800253e <_svfiprintf_r+0xda>
 8002508:	06d9      	lsls	r1, r3, #27
 800250a:	bf44      	itt	mi
 800250c:	2220      	movmi	r2, #32
 800250e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002512:	071a      	lsls	r2, r3, #28
 8002514:	bf44      	itt	mi
 8002516:	222b      	movmi	r2, #43	; 0x2b
 8002518:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800251c:	782a      	ldrb	r2, [r5, #0]
 800251e:	2a2a      	cmp	r2, #42	; 0x2a
 8002520:	d015      	beq.n	800254e <_svfiprintf_r+0xea>
 8002522:	462f      	mov	r7, r5
 8002524:	2000      	movs	r0, #0
 8002526:	250a      	movs	r5, #10
 8002528:	9a07      	ldr	r2, [sp, #28]
 800252a:	4639      	mov	r1, r7
 800252c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002530:	3b30      	subs	r3, #48	; 0x30
 8002532:	2b09      	cmp	r3, #9
 8002534:	d94d      	bls.n	80025d2 <_svfiprintf_r+0x16e>
 8002536:	b1b8      	cbz	r0, 8002568 <_svfiprintf_r+0x104>
 8002538:	e00f      	b.n	800255a <_svfiprintf_r+0xf6>
 800253a:	462f      	mov	r7, r5
 800253c:	e7b8      	b.n	80024b0 <_svfiprintf_r+0x4c>
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <_svfiprintf_r+0x1dc>)
 8002540:	463d      	mov	r5, r7
 8002542:	1a80      	subs	r0, r0, r2
 8002544:	fa0b f000 	lsl.w	r0, fp, r0
 8002548:	4318      	orrs	r0, r3
 800254a:	9004      	str	r0, [sp, #16]
 800254c:	e7d3      	b.n	80024f6 <_svfiprintf_r+0x92>
 800254e:	9a03      	ldr	r2, [sp, #12]
 8002550:	1d11      	adds	r1, r2, #4
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	9103      	str	r1, [sp, #12]
 8002556:	2a00      	cmp	r2, #0
 8002558:	db01      	blt.n	800255e <_svfiprintf_r+0xfa>
 800255a:	9207      	str	r2, [sp, #28]
 800255c:	e004      	b.n	8002568 <_svfiprintf_r+0x104>
 800255e:	4252      	negs	r2, r2
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	9207      	str	r2, [sp, #28]
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	783b      	ldrb	r3, [r7, #0]
 800256a:	2b2e      	cmp	r3, #46	; 0x2e
 800256c:	d10c      	bne.n	8002588 <_svfiprintf_r+0x124>
 800256e:	787b      	ldrb	r3, [r7, #1]
 8002570:	2b2a      	cmp	r3, #42	; 0x2a
 8002572:	d133      	bne.n	80025dc <_svfiprintf_r+0x178>
 8002574:	9b03      	ldr	r3, [sp, #12]
 8002576:	3702      	adds	r7, #2
 8002578:	1d1a      	adds	r2, r3, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	9203      	str	r2, [sp, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	bfb8      	it	lt
 8002582:	f04f 33ff 	movlt.w	r3, #4294967295
 8002586:	9305      	str	r3, [sp, #20]
 8002588:	4d2e      	ldr	r5, [pc, #184]	; (8002644 <_svfiprintf_r+0x1e0>)
 800258a:	2203      	movs	r2, #3
 800258c:	7839      	ldrb	r1, [r7, #0]
 800258e:	4628      	mov	r0, r5
 8002590:	f000 f9e8 	bl	8002964 <memchr>
 8002594:	b138      	cbz	r0, 80025a6 <_svfiprintf_r+0x142>
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	1b40      	subs	r0, r0, r5
 800259a:	fa03 f000 	lsl.w	r0, r3, r0
 800259e:	9b04      	ldr	r3, [sp, #16]
 80025a0:	3701      	adds	r7, #1
 80025a2:	4303      	orrs	r3, r0
 80025a4:	9304      	str	r3, [sp, #16]
 80025a6:	7839      	ldrb	r1, [r7, #0]
 80025a8:	2206      	movs	r2, #6
 80025aa:	4827      	ldr	r0, [pc, #156]	; (8002648 <_svfiprintf_r+0x1e4>)
 80025ac:	1c7e      	adds	r6, r7, #1
 80025ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025b2:	f000 f9d7 	bl	8002964 <memchr>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d038      	beq.n	800262c <_svfiprintf_r+0x1c8>
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <_svfiprintf_r+0x1e8>)
 80025bc:	bb13      	cbnz	r3, 8002604 <_svfiprintf_r+0x1a0>
 80025be:	9b03      	ldr	r3, [sp, #12]
 80025c0:	3307      	adds	r3, #7
 80025c2:	f023 0307 	bic.w	r3, r3, #7
 80025c6:	3308      	adds	r3, #8
 80025c8:	9303      	str	r3, [sp, #12]
 80025ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025cc:	444b      	add	r3, r9
 80025ce:	9309      	str	r3, [sp, #36]	; 0x24
 80025d0:	e76d      	b.n	80024ae <_svfiprintf_r+0x4a>
 80025d2:	fb05 3202 	mla	r2, r5, r2, r3
 80025d6:	2001      	movs	r0, #1
 80025d8:	460f      	mov	r7, r1
 80025da:	e7a6      	b.n	800252a <_svfiprintf_r+0xc6>
 80025dc:	2300      	movs	r3, #0
 80025de:	250a      	movs	r5, #10
 80025e0:	4619      	mov	r1, r3
 80025e2:	3701      	adds	r7, #1
 80025e4:	9305      	str	r3, [sp, #20]
 80025e6:	4638      	mov	r0, r7
 80025e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025ec:	3a30      	subs	r2, #48	; 0x30
 80025ee:	2a09      	cmp	r2, #9
 80025f0:	d903      	bls.n	80025fa <_svfiprintf_r+0x196>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0c8      	beq.n	8002588 <_svfiprintf_r+0x124>
 80025f6:	9105      	str	r1, [sp, #20]
 80025f8:	e7c6      	b.n	8002588 <_svfiprintf_r+0x124>
 80025fa:	fb05 2101 	mla	r1, r5, r1, r2
 80025fe:	2301      	movs	r3, #1
 8002600:	4607      	mov	r7, r0
 8002602:	e7f0      	b.n	80025e6 <_svfiprintf_r+0x182>
 8002604:	ab03      	add	r3, sp, #12
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4622      	mov	r2, r4
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_svfiprintf_r+0x1ec>)
 800260c:	a904      	add	r1, sp, #16
 800260e:	4640      	mov	r0, r8
 8002610:	f3af 8000 	nop.w
 8002614:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002618:	4681      	mov	r9, r0
 800261a:	d1d6      	bne.n	80025ca <_svfiprintf_r+0x166>
 800261c:	89a3      	ldrh	r3, [r4, #12]
 800261e:	065b      	lsls	r3, r3, #25
 8002620:	f53f af35 	bmi.w	800248e <_svfiprintf_r+0x2a>
 8002624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002626:	b01d      	add	sp, #116	; 0x74
 8002628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800262c:	ab03      	add	r3, sp, #12
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4622      	mov	r2, r4
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_svfiprintf_r+0x1ec>)
 8002634:	a904      	add	r1, sp, #16
 8002636:	4640      	mov	r0, r8
 8002638:	f000 f882 	bl	8002740 <_printf_i>
 800263c:	e7ea      	b.n	8002614 <_svfiprintf_r+0x1b0>
 800263e:	bf00      	nop
 8002640:	08002d6c 	.word	0x08002d6c
 8002644:	08002d72 	.word	0x08002d72
 8002648:	08002d76 	.word	0x08002d76
 800264c:	00000000 	.word	0x00000000
 8002650:	080023b1 	.word	0x080023b1

08002654 <_printf_common>:
 8002654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002658:	4691      	mov	r9, r2
 800265a:	461f      	mov	r7, r3
 800265c:	688a      	ldr	r2, [r1, #8]
 800265e:	690b      	ldr	r3, [r1, #16]
 8002660:	4606      	mov	r6, r0
 8002662:	4293      	cmp	r3, r2
 8002664:	bfb8      	it	lt
 8002666:	4613      	movlt	r3, r2
 8002668:	f8c9 3000 	str.w	r3, [r9]
 800266c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002670:	460c      	mov	r4, r1
 8002672:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002676:	b112      	cbz	r2, 800267e <_printf_common+0x2a>
 8002678:	3301      	adds	r3, #1
 800267a:	f8c9 3000 	str.w	r3, [r9]
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	0699      	lsls	r1, r3, #26
 8002682:	bf42      	ittt	mi
 8002684:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002688:	3302      	addmi	r3, #2
 800268a:	f8c9 3000 	strmi.w	r3, [r9]
 800268e:	6825      	ldr	r5, [r4, #0]
 8002690:	f015 0506 	ands.w	r5, r5, #6
 8002694:	d107      	bne.n	80026a6 <_printf_common+0x52>
 8002696:	f104 0a19 	add.w	sl, r4, #25
 800269a:	68e3      	ldr	r3, [r4, #12]
 800269c:	f8d9 2000 	ldr.w	r2, [r9]
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	42ab      	cmp	r3, r5
 80026a4:	dc29      	bgt.n	80026fa <_printf_common+0xa6>
 80026a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	3300      	adds	r3, #0
 80026ae:	bf18      	it	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	0692      	lsls	r2, r2, #26
 80026b4:	d42e      	bmi.n	8002714 <_printf_common+0xc0>
 80026b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026ba:	4639      	mov	r1, r7
 80026bc:	4630      	mov	r0, r6
 80026be:	47c0      	blx	r8
 80026c0:	3001      	adds	r0, #1
 80026c2:	d021      	beq.n	8002708 <_printf_common+0xb4>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	68e5      	ldr	r5, [r4, #12]
 80026c8:	f003 0306 	and.w	r3, r3, #6
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	bf18      	it	ne
 80026d0:	2500      	movne	r5, #0
 80026d2:	f8d9 2000 	ldr.w	r2, [r9]
 80026d6:	f04f 0900 	mov.w	r9, #0
 80026da:	bf08      	it	eq
 80026dc:	1aad      	subeq	r5, r5, r2
 80026de:	68a3      	ldr	r3, [r4, #8]
 80026e0:	6922      	ldr	r2, [r4, #16]
 80026e2:	bf08      	it	eq
 80026e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bfc4      	itt	gt
 80026ec:	1a9b      	subgt	r3, r3, r2
 80026ee:	18ed      	addgt	r5, r5, r3
 80026f0:	341a      	adds	r4, #26
 80026f2:	454d      	cmp	r5, r9
 80026f4:	d11a      	bne.n	800272c <_printf_common+0xd8>
 80026f6:	2000      	movs	r0, #0
 80026f8:	e008      	b.n	800270c <_printf_common+0xb8>
 80026fa:	2301      	movs	r3, #1
 80026fc:	4652      	mov	r2, sl
 80026fe:	4639      	mov	r1, r7
 8002700:	4630      	mov	r0, r6
 8002702:	47c0      	blx	r8
 8002704:	3001      	adds	r0, #1
 8002706:	d103      	bne.n	8002710 <_printf_common+0xbc>
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002710:	3501      	adds	r5, #1
 8002712:	e7c2      	b.n	800269a <_printf_common+0x46>
 8002714:	2030      	movs	r0, #48	; 0x30
 8002716:	18e1      	adds	r1, r4, r3
 8002718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002722:	4422      	add	r2, r4
 8002724:	3302      	adds	r3, #2
 8002726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800272a:	e7c4      	b.n	80026b6 <_printf_common+0x62>
 800272c:	2301      	movs	r3, #1
 800272e:	4622      	mov	r2, r4
 8002730:	4639      	mov	r1, r7
 8002732:	4630      	mov	r0, r6
 8002734:	47c0      	blx	r8
 8002736:	3001      	adds	r0, #1
 8002738:	d0e6      	beq.n	8002708 <_printf_common+0xb4>
 800273a:	f109 0901 	add.w	r9, r9, #1
 800273e:	e7d8      	b.n	80026f2 <_printf_common+0x9e>

08002740 <_printf_i>:
 8002740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002744:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002748:	460c      	mov	r4, r1
 800274a:	7e09      	ldrb	r1, [r1, #24]
 800274c:	b085      	sub	sp, #20
 800274e:	296e      	cmp	r1, #110	; 0x6e
 8002750:	4617      	mov	r7, r2
 8002752:	4606      	mov	r6, r0
 8002754:	4698      	mov	r8, r3
 8002756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002758:	f000 80b3 	beq.w	80028c2 <_printf_i+0x182>
 800275c:	d822      	bhi.n	80027a4 <_printf_i+0x64>
 800275e:	2963      	cmp	r1, #99	; 0x63
 8002760:	d036      	beq.n	80027d0 <_printf_i+0x90>
 8002762:	d80a      	bhi.n	800277a <_printf_i+0x3a>
 8002764:	2900      	cmp	r1, #0
 8002766:	f000 80b9 	beq.w	80028dc <_printf_i+0x19c>
 800276a:	2958      	cmp	r1, #88	; 0x58
 800276c:	f000 8083 	beq.w	8002876 <_printf_i+0x136>
 8002770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002778:	e032      	b.n	80027e0 <_printf_i+0xa0>
 800277a:	2964      	cmp	r1, #100	; 0x64
 800277c:	d001      	beq.n	8002782 <_printf_i+0x42>
 800277e:	2969      	cmp	r1, #105	; 0x69
 8002780:	d1f6      	bne.n	8002770 <_printf_i+0x30>
 8002782:	6820      	ldr	r0, [r4, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	0605      	lsls	r5, r0, #24
 8002788:	f103 0104 	add.w	r1, r3, #4
 800278c:	d52a      	bpl.n	80027e4 <_printf_i+0xa4>
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6011      	str	r1, [r2, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da03      	bge.n	800279e <_printf_i+0x5e>
 8002796:	222d      	movs	r2, #45	; 0x2d
 8002798:	425b      	negs	r3, r3
 800279a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800279e:	486f      	ldr	r0, [pc, #444]	; (800295c <_printf_i+0x21c>)
 80027a0:	220a      	movs	r2, #10
 80027a2:	e039      	b.n	8002818 <_printf_i+0xd8>
 80027a4:	2973      	cmp	r1, #115	; 0x73
 80027a6:	f000 809d 	beq.w	80028e4 <_printf_i+0x1a4>
 80027aa:	d808      	bhi.n	80027be <_printf_i+0x7e>
 80027ac:	296f      	cmp	r1, #111	; 0x6f
 80027ae:	d020      	beq.n	80027f2 <_printf_i+0xb2>
 80027b0:	2970      	cmp	r1, #112	; 0x70
 80027b2:	d1dd      	bne.n	8002770 <_printf_i+0x30>
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	6023      	str	r3, [r4, #0]
 80027bc:	e003      	b.n	80027c6 <_printf_i+0x86>
 80027be:	2975      	cmp	r1, #117	; 0x75
 80027c0:	d017      	beq.n	80027f2 <_printf_i+0xb2>
 80027c2:	2978      	cmp	r1, #120	; 0x78
 80027c4:	d1d4      	bne.n	8002770 <_printf_i+0x30>
 80027c6:	2378      	movs	r3, #120	; 0x78
 80027c8:	4865      	ldr	r0, [pc, #404]	; (8002960 <_printf_i+0x220>)
 80027ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027ce:	e055      	b.n	800287c <_printf_i+0x13c>
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027d6:	1d19      	adds	r1, r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6011      	str	r1, [r2, #0]
 80027dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027e0:	2301      	movs	r3, #1
 80027e2:	e08c      	b.n	80028fe <_printf_i+0x1be>
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027ea:	6011      	str	r1, [r2, #0]
 80027ec:	bf18      	it	ne
 80027ee:	b21b      	sxthne	r3, r3
 80027f0:	e7cf      	b.n	8002792 <_printf_i+0x52>
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	6825      	ldr	r5, [r4, #0]
 80027f6:	1d18      	adds	r0, r3, #4
 80027f8:	6010      	str	r0, [r2, #0]
 80027fa:	0628      	lsls	r0, r5, #24
 80027fc:	d501      	bpl.n	8002802 <_printf_i+0xc2>
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	e002      	b.n	8002808 <_printf_i+0xc8>
 8002802:	0668      	lsls	r0, r5, #25
 8002804:	d5fb      	bpl.n	80027fe <_printf_i+0xbe>
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	296f      	cmp	r1, #111	; 0x6f
 800280a:	bf14      	ite	ne
 800280c:	220a      	movne	r2, #10
 800280e:	2208      	moveq	r2, #8
 8002810:	4852      	ldr	r0, [pc, #328]	; (800295c <_printf_i+0x21c>)
 8002812:	2100      	movs	r1, #0
 8002814:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002818:	6865      	ldr	r5, [r4, #4]
 800281a:	2d00      	cmp	r5, #0
 800281c:	60a5      	str	r5, [r4, #8]
 800281e:	f2c0 8095 	blt.w	800294c <_printf_i+0x20c>
 8002822:	6821      	ldr	r1, [r4, #0]
 8002824:	f021 0104 	bic.w	r1, r1, #4
 8002828:	6021      	str	r1, [r4, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d13d      	bne.n	80028aa <_printf_i+0x16a>
 800282e:	2d00      	cmp	r5, #0
 8002830:	f040 808e 	bne.w	8002950 <_printf_i+0x210>
 8002834:	4665      	mov	r5, ip
 8002836:	2a08      	cmp	r2, #8
 8002838:	d10b      	bne.n	8002852 <_printf_i+0x112>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	07db      	lsls	r3, r3, #31
 800283e:	d508      	bpl.n	8002852 <_printf_i+0x112>
 8002840:	6923      	ldr	r3, [r4, #16]
 8002842:	6862      	ldr	r2, [r4, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	bfde      	ittt	le
 8002848:	2330      	movle	r3, #48	; 0x30
 800284a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800284e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002852:	ebac 0305 	sub.w	r3, ip, r5
 8002856:	6123      	str	r3, [r4, #16]
 8002858:	f8cd 8000 	str.w	r8, [sp]
 800285c:	463b      	mov	r3, r7
 800285e:	aa03      	add	r2, sp, #12
 8002860:	4621      	mov	r1, r4
 8002862:	4630      	mov	r0, r6
 8002864:	f7ff fef6 	bl	8002654 <_printf_common>
 8002868:	3001      	adds	r0, #1
 800286a:	d14d      	bne.n	8002908 <_printf_i+0x1c8>
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	b005      	add	sp, #20
 8002872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002876:	4839      	ldr	r0, [pc, #228]	; (800295c <_printf_i+0x21c>)
 8002878:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800287c:	6813      	ldr	r3, [r2, #0]
 800287e:	6821      	ldr	r1, [r4, #0]
 8002880:	1d1d      	adds	r5, r3, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6015      	str	r5, [r2, #0]
 8002886:	060a      	lsls	r2, r1, #24
 8002888:	d50b      	bpl.n	80028a2 <_printf_i+0x162>
 800288a:	07ca      	lsls	r2, r1, #31
 800288c:	bf44      	itt	mi
 800288e:	f041 0120 	orrmi.w	r1, r1, #32
 8002892:	6021      	strmi	r1, [r4, #0]
 8002894:	b91b      	cbnz	r3, 800289e <_printf_i+0x15e>
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	f022 0220 	bic.w	r2, r2, #32
 800289c:	6022      	str	r2, [r4, #0]
 800289e:	2210      	movs	r2, #16
 80028a0:	e7b7      	b.n	8002812 <_printf_i+0xd2>
 80028a2:	064d      	lsls	r5, r1, #25
 80028a4:	bf48      	it	mi
 80028a6:	b29b      	uxthmi	r3, r3
 80028a8:	e7ef      	b.n	800288a <_printf_i+0x14a>
 80028aa:	4665      	mov	r5, ip
 80028ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80028b0:	fb02 3311 	mls	r3, r2, r1, r3
 80028b4:	5cc3      	ldrb	r3, [r0, r3]
 80028b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80028ba:	460b      	mov	r3, r1
 80028bc:	2900      	cmp	r1, #0
 80028be:	d1f5      	bne.n	80028ac <_printf_i+0x16c>
 80028c0:	e7b9      	b.n	8002836 <_printf_i+0xf6>
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	6825      	ldr	r5, [r4, #0]
 80028c6:	1d18      	adds	r0, r3, #4
 80028c8:	6961      	ldr	r1, [r4, #20]
 80028ca:	6010      	str	r0, [r2, #0]
 80028cc:	0628      	lsls	r0, r5, #24
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	d501      	bpl.n	80028d6 <_printf_i+0x196>
 80028d2:	6019      	str	r1, [r3, #0]
 80028d4:	e002      	b.n	80028dc <_printf_i+0x19c>
 80028d6:	066a      	lsls	r2, r5, #25
 80028d8:	d5fb      	bpl.n	80028d2 <_printf_i+0x192>
 80028da:	8019      	strh	r1, [r3, #0]
 80028dc:	2300      	movs	r3, #0
 80028de:	4665      	mov	r5, ip
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	e7b9      	b.n	8002858 <_printf_i+0x118>
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	1d19      	adds	r1, r3, #4
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	681d      	ldr	r5, [r3, #0]
 80028ec:	6862      	ldr	r2, [r4, #4]
 80028ee:	2100      	movs	r1, #0
 80028f0:	4628      	mov	r0, r5
 80028f2:	f000 f837 	bl	8002964 <memchr>
 80028f6:	b108      	cbz	r0, 80028fc <_printf_i+0x1bc>
 80028f8:	1b40      	subs	r0, r0, r5
 80028fa:	6060      	str	r0, [r4, #4]
 80028fc:	6863      	ldr	r3, [r4, #4]
 80028fe:	6123      	str	r3, [r4, #16]
 8002900:	2300      	movs	r3, #0
 8002902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002906:	e7a7      	b.n	8002858 <_printf_i+0x118>
 8002908:	6923      	ldr	r3, [r4, #16]
 800290a:	462a      	mov	r2, r5
 800290c:	4639      	mov	r1, r7
 800290e:	4630      	mov	r0, r6
 8002910:	47c0      	blx	r8
 8002912:	3001      	adds	r0, #1
 8002914:	d0aa      	beq.n	800286c <_printf_i+0x12c>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	079b      	lsls	r3, r3, #30
 800291a:	d413      	bmi.n	8002944 <_printf_i+0x204>
 800291c:	68e0      	ldr	r0, [r4, #12]
 800291e:	9b03      	ldr	r3, [sp, #12]
 8002920:	4298      	cmp	r0, r3
 8002922:	bfb8      	it	lt
 8002924:	4618      	movlt	r0, r3
 8002926:	e7a3      	b.n	8002870 <_printf_i+0x130>
 8002928:	2301      	movs	r3, #1
 800292a:	464a      	mov	r2, r9
 800292c:	4639      	mov	r1, r7
 800292e:	4630      	mov	r0, r6
 8002930:	47c0      	blx	r8
 8002932:	3001      	adds	r0, #1
 8002934:	d09a      	beq.n	800286c <_printf_i+0x12c>
 8002936:	3501      	adds	r5, #1
 8002938:	68e3      	ldr	r3, [r4, #12]
 800293a:	9a03      	ldr	r2, [sp, #12]
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	42ab      	cmp	r3, r5
 8002940:	dcf2      	bgt.n	8002928 <_printf_i+0x1e8>
 8002942:	e7eb      	b.n	800291c <_printf_i+0x1dc>
 8002944:	2500      	movs	r5, #0
 8002946:	f104 0919 	add.w	r9, r4, #25
 800294a:	e7f5      	b.n	8002938 <_printf_i+0x1f8>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ac      	bne.n	80028aa <_printf_i+0x16a>
 8002950:	7803      	ldrb	r3, [r0, #0]
 8002952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800295a:	e76c      	b.n	8002836 <_printf_i+0xf6>
 800295c:	08002d7d 	.word	0x08002d7d
 8002960:	08002d8e 	.word	0x08002d8e

08002964 <memchr>:
 8002964:	b510      	push	{r4, lr}
 8002966:	b2c9      	uxtb	r1, r1
 8002968:	4402      	add	r2, r0
 800296a:	4290      	cmp	r0, r2
 800296c:	4603      	mov	r3, r0
 800296e:	d101      	bne.n	8002974 <memchr+0x10>
 8002970:	2300      	movs	r3, #0
 8002972:	e003      	b.n	800297c <memchr+0x18>
 8002974:	781c      	ldrb	r4, [r3, #0]
 8002976:	3001      	adds	r0, #1
 8002978:	428c      	cmp	r4, r1
 800297a:	d1f6      	bne.n	800296a <memchr+0x6>
 800297c:	4618      	mov	r0, r3
 800297e:	bd10      	pop	{r4, pc}

08002980 <memcpy>:
 8002980:	b510      	push	{r4, lr}
 8002982:	1e43      	subs	r3, r0, #1
 8002984:	440a      	add	r2, r1
 8002986:	4291      	cmp	r1, r2
 8002988:	d100      	bne.n	800298c <memcpy+0xc>
 800298a:	bd10      	pop	{r4, pc}
 800298c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002994:	e7f7      	b.n	8002986 <memcpy+0x6>

08002996 <memmove>:
 8002996:	4288      	cmp	r0, r1
 8002998:	b510      	push	{r4, lr}
 800299a:	eb01 0302 	add.w	r3, r1, r2
 800299e:	d807      	bhi.n	80029b0 <memmove+0x1a>
 80029a0:	1e42      	subs	r2, r0, #1
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d00a      	beq.n	80029bc <memmove+0x26>
 80029a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80029ae:	e7f8      	b.n	80029a2 <memmove+0xc>
 80029b0:	4283      	cmp	r3, r0
 80029b2:	d9f5      	bls.n	80029a0 <memmove+0xa>
 80029b4:	1881      	adds	r1, r0, r2
 80029b6:	1ad2      	subs	r2, r2, r3
 80029b8:	42d3      	cmn	r3, r2
 80029ba:	d100      	bne.n	80029be <memmove+0x28>
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80029c6:	e7f7      	b.n	80029b8 <memmove+0x22>

080029c8 <_free_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4605      	mov	r5, r0
 80029cc:	2900      	cmp	r1, #0
 80029ce:	d043      	beq.n	8002a58 <_free_r+0x90>
 80029d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d4:	1f0c      	subs	r4, r1, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bfb8      	it	lt
 80029da:	18e4      	addlt	r4, r4, r3
 80029dc:	f000 f8d0 	bl	8002b80 <__malloc_lock>
 80029e0:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <_free_r+0x94>)
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	4610      	mov	r0, r2
 80029e6:	b933      	cbnz	r3, 80029f6 <_free_r+0x2e>
 80029e8:	6063      	str	r3, [r4, #4]
 80029ea:	6014      	str	r4, [r2, #0]
 80029ec:	4628      	mov	r0, r5
 80029ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029f2:	f000 b8c6 	b.w	8002b82 <__malloc_unlock>
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	d90b      	bls.n	8002a12 <_free_r+0x4a>
 80029fa:	6821      	ldr	r1, [r4, #0]
 80029fc:	1862      	adds	r2, r4, r1
 80029fe:	4293      	cmp	r3, r2
 8002a00:	bf01      	itttt	eq
 8002a02:	681a      	ldreq	r2, [r3, #0]
 8002a04:	685b      	ldreq	r3, [r3, #4]
 8002a06:	1852      	addeq	r2, r2, r1
 8002a08:	6022      	streq	r2, [r4, #0]
 8002a0a:	6063      	str	r3, [r4, #4]
 8002a0c:	6004      	str	r4, [r0, #0]
 8002a0e:	e7ed      	b.n	80029ec <_free_r+0x24>
 8002a10:	4613      	mov	r3, r2
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	b10a      	cbz	r2, 8002a1a <_free_r+0x52>
 8002a16:	42a2      	cmp	r2, r4
 8002a18:	d9fa      	bls.n	8002a10 <_free_r+0x48>
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	1858      	adds	r0, r3, r1
 8002a1e:	42a0      	cmp	r0, r4
 8002a20:	d10b      	bne.n	8002a3a <_free_r+0x72>
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	4401      	add	r1, r0
 8002a26:	1858      	adds	r0, r3, r1
 8002a28:	4282      	cmp	r2, r0
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	d1de      	bne.n	80029ec <_free_r+0x24>
 8002a2e:	6810      	ldr	r0, [r2, #0]
 8002a30:	6852      	ldr	r2, [r2, #4]
 8002a32:	4401      	add	r1, r0
 8002a34:	6019      	str	r1, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	e7d8      	b.n	80029ec <_free_r+0x24>
 8002a3a:	d902      	bls.n	8002a42 <_free_r+0x7a>
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	e7d4      	b.n	80029ec <_free_r+0x24>
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1821      	adds	r1, r4, r0
 8002a46:	428a      	cmp	r2, r1
 8002a48:	bf01      	itttt	eq
 8002a4a:	6811      	ldreq	r1, [r2, #0]
 8002a4c:	6852      	ldreq	r2, [r2, #4]
 8002a4e:	1809      	addeq	r1, r1, r0
 8002a50:	6021      	streq	r1, [r4, #0]
 8002a52:	6062      	str	r2, [r4, #4]
 8002a54:	605c      	str	r4, [r3, #4]
 8002a56:	e7c9      	b.n	80029ec <_free_r+0x24>
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000090 	.word	0x20000090

08002a60 <_malloc_r>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	1ccd      	adds	r5, r1, #3
 8002a64:	f025 0503 	bic.w	r5, r5, #3
 8002a68:	3508      	adds	r5, #8
 8002a6a:	2d0c      	cmp	r5, #12
 8002a6c:	bf38      	it	cc
 8002a6e:	250c      	movcc	r5, #12
 8002a70:	2d00      	cmp	r5, #0
 8002a72:	4606      	mov	r6, r0
 8002a74:	db01      	blt.n	8002a7a <_malloc_r+0x1a>
 8002a76:	42a9      	cmp	r1, r5
 8002a78:	d903      	bls.n	8002a82 <_malloc_r+0x22>
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	6033      	str	r3, [r6, #0]
 8002a7e:	2000      	movs	r0, #0
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
 8002a82:	f000 f87d 	bl	8002b80 <__malloc_lock>
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <_malloc_r+0xac>)
 8002a88:	6814      	ldr	r4, [r2, #0]
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	b991      	cbnz	r1, 8002ab4 <_malloc_r+0x54>
 8002a8e:	4c20      	ldr	r4, [pc, #128]	; (8002b10 <_malloc_r+0xb0>)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	b91b      	cbnz	r3, 8002a9c <_malloc_r+0x3c>
 8002a94:	4630      	mov	r0, r6
 8002a96:	f000 f863 	bl	8002b60 <_sbrk_r>
 8002a9a:	6020      	str	r0, [r4, #0]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f000 f85e 	bl	8002b60 <_sbrk_r>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d124      	bne.n	8002af2 <_malloc_r+0x92>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	4630      	mov	r0, r6
 8002aac:	6033      	str	r3, [r6, #0]
 8002aae:	f000 f868 	bl	8002b82 <__malloc_unlock>
 8002ab2:	e7e4      	b.n	8002a7e <_malloc_r+0x1e>
 8002ab4:	680b      	ldr	r3, [r1, #0]
 8002ab6:	1b5b      	subs	r3, r3, r5
 8002ab8:	d418      	bmi.n	8002aec <_malloc_r+0x8c>
 8002aba:	2b0b      	cmp	r3, #11
 8002abc:	d90f      	bls.n	8002ade <_malloc_r+0x7e>
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	18cc      	adds	r4, r1, r3
 8002ac2:	50cd      	str	r5, [r1, r3]
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 f85c 	bl	8002b82 <__malloc_unlock>
 8002aca:	f104 000b 	add.w	r0, r4, #11
 8002ace:	1d23      	adds	r3, r4, #4
 8002ad0:	f020 0007 	bic.w	r0, r0, #7
 8002ad4:	1ac3      	subs	r3, r0, r3
 8002ad6:	d0d3      	beq.n	8002a80 <_malloc_r+0x20>
 8002ad8:	425a      	negs	r2, r3
 8002ada:	50e2      	str	r2, [r4, r3]
 8002adc:	e7d0      	b.n	8002a80 <_malloc_r+0x20>
 8002ade:	684b      	ldr	r3, [r1, #4]
 8002ae0:	428c      	cmp	r4, r1
 8002ae2:	bf16      	itet	ne
 8002ae4:	6063      	strne	r3, [r4, #4]
 8002ae6:	6013      	streq	r3, [r2, #0]
 8002ae8:	460c      	movne	r4, r1
 8002aea:	e7eb      	b.n	8002ac4 <_malloc_r+0x64>
 8002aec:	460c      	mov	r4, r1
 8002aee:	6849      	ldr	r1, [r1, #4]
 8002af0:	e7cc      	b.n	8002a8c <_malloc_r+0x2c>
 8002af2:	1cc4      	adds	r4, r0, #3
 8002af4:	f024 0403 	bic.w	r4, r4, #3
 8002af8:	42a0      	cmp	r0, r4
 8002afa:	d005      	beq.n	8002b08 <_malloc_r+0xa8>
 8002afc:	1a21      	subs	r1, r4, r0
 8002afe:	4630      	mov	r0, r6
 8002b00:	f000 f82e 	bl	8002b60 <_sbrk_r>
 8002b04:	3001      	adds	r0, #1
 8002b06:	d0cf      	beq.n	8002aa8 <_malloc_r+0x48>
 8002b08:	6025      	str	r5, [r4, #0]
 8002b0a:	e7db      	b.n	8002ac4 <_malloc_r+0x64>
 8002b0c:	20000090 	.word	0x20000090
 8002b10:	20000094 	.word	0x20000094

08002b14 <_realloc_r>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	4607      	mov	r7, r0
 8002b18:	4614      	mov	r4, r2
 8002b1a:	460e      	mov	r6, r1
 8002b1c:	b921      	cbnz	r1, 8002b28 <_realloc_r+0x14>
 8002b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b22:	4611      	mov	r1, r2
 8002b24:	f7ff bf9c 	b.w	8002a60 <_malloc_r>
 8002b28:	b922      	cbnz	r2, 8002b34 <_realloc_r+0x20>
 8002b2a:	f7ff ff4d 	bl	80029c8 <_free_r>
 8002b2e:	4625      	mov	r5, r4
 8002b30:	4628      	mov	r0, r5
 8002b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b34:	f000 f826 	bl	8002b84 <_malloc_usable_size_r>
 8002b38:	42a0      	cmp	r0, r4
 8002b3a:	d20f      	bcs.n	8002b5c <_realloc_r+0x48>
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	4638      	mov	r0, r7
 8002b40:	f7ff ff8e 	bl	8002a60 <_malloc_r>
 8002b44:	4605      	mov	r5, r0
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d0f2      	beq.n	8002b30 <_realloc_r+0x1c>
 8002b4a:	4631      	mov	r1, r6
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	f7ff ff17 	bl	8002980 <memcpy>
 8002b52:	4631      	mov	r1, r6
 8002b54:	4638      	mov	r0, r7
 8002b56:	f7ff ff37 	bl	80029c8 <_free_r>
 8002b5a:	e7e9      	b.n	8002b30 <_realloc_r+0x1c>
 8002b5c:	4635      	mov	r5, r6
 8002b5e:	e7e7      	b.n	8002b30 <_realloc_r+0x1c>

08002b60 <_sbrk_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	2300      	movs	r3, #0
 8002b64:	4c05      	ldr	r4, [pc, #20]	; (8002b7c <_sbrk_r+0x1c>)
 8002b66:	4605      	mov	r5, r0
 8002b68:	4608      	mov	r0, r1
 8002b6a:	6023      	str	r3, [r4, #0]
 8002b6c:	f7fd fee2 	bl	8000934 <_sbrk>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_sbrk_r+0x1a>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_sbrk_r+0x1a>
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	20000308 	.word	0x20000308

08002b80 <__malloc_lock>:
 8002b80:	4770      	bx	lr

08002b82 <__malloc_unlock>:
 8002b82:	4770      	bx	lr

08002b84 <_malloc_usable_size_r>:
 8002b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b88:	1f18      	subs	r0, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bfbc      	itt	lt
 8002b8e:	580b      	ldrlt	r3, [r1, r0]
 8002b90:	18c0      	addlt	r0, r0, r3
 8002b92:	4770      	bx	lr

08002b94 <_init>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr

08002ba0 <_fini>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr
